name: Release Camunda Community Project on Maven Central
description: Encapsulates the release process of Camunda community extensions
inputs:
  artifacts-pattern:
    description: Which artifacts to store. Set to empty string to disable
    required: false
    default: ./target/nexus-staging/**/*.jar
  run-tests:
    default: ""
    required: false
    description: Wether to explicitly run maven tests prior to releasing
  maven-additional-options:
    description: Any extra Maven options
    required: false
    default: ""
  maven-release-options:
    description: Any extra Maven options for the release process (-DskipTests is already implied)
    required: false
    default: ""
  release-version:
    description: Release Version (usually tag name). If empty, a SNAPSHOT (with the currently configured version) will be deployed.
    required: false
  release-profile:
    description: Maven profile to be selected for the release; typically "release".
    required: false
  nexus-usr:
    description: Camunda Nexus username
    required: true
  nexus-psw:
    description: Camunda Nexus password
    required: true
  maven-usr:
    description: Maven Central username
    required: true
  maven-psw:
    description: Maven Central password
    required: true
  maven-gpg-passphrase:
    description: GPG passphrase used to unlock the signing key
    required: true
  github-token:
    description: GitHub token
    required: true
  maven-build-options:
    description: Any extra Maven options for the initial build process
    required: false
    default: ""
  vulnerability-scan:
    description: TODO
    required: false
    default: "false"
outputs:
  artifacts_archive_path:
    description: Filename of zipfile containing all files matched by artifacts-pattern.
    value: ${{ steps.create-archive.outputs.filename }}
runs:
  using: composite
  steps:
    - name: Initialize
      run: |-
        echo Repo: ${GITHUB_REPOSITORY}
        git config --global user.name "Release Bot"
        git config --global user.email actions@github.com
        test -n "${{inputs.release-profile}}" && echo 'RELEASE_PROFILE=-P${{inputs.release-profile}}' >> $GITHUB_ENV
        cp -v ${{ github.action_path }}/resources/settings.xml $HOME/.m2/
      shell: bash
    - name: Run maven
      run: |-
        test -z "${{ inputs.run-tests }}" && SKIP_TESTS="-DskipTests"
        mvn -B ${{ inputs.maven-additional-options }} ${{ inputs.maven-build-options }} package ${SKIP_TESTS}
      shell: bash
      ###########################################
      # Download and install Trivy and template #
      ###########################################
    - name: Download and Install Trivy
      shell: bash
      run: |
        if [[ "${{ inputs.vulnerability-scan }}" == "true" ]];
        then
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b ${GITHUB_WORKSPACE}
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/sarif.tpl -o sarif.tpl
          ./trivy --version
          ./trivy fs -t @sarif.tpl -f template -o trivy-results.sarif .

          if [[ $(cat trivy-results.sarif | grep -E 'Severity: (HIGH|CRITICAL)' | wc -l) > 0 ]];
          then
            ./trivy fs .
            exit 1
          else
            exit 0
          fi
        fi
    - name: Upload SARIF file
      shell: bash
      run: |
        if [[ "${{ inputs.vulnerability-scan }}" == "true" ]];
        then
          COMPRESSED_SARIF=$(gzip -c trivy-results.sarif | base64 -w0)
          curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "authorization: Bearer ${{ inputs.github-token }}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/code-scanning/sarifs \
            -d '{"commit_sha":"${GITHUB_SHA}","ref":"${GITHUB_REF}","sarif": "${COMPRESSED_SARIF}"}' || true
        fi
    - name: Publish SNAPSHOT
      run: |-
        test -n "${{ inputs.release-version }}" && echo "::debug::Not publishing SNAPSHOT because release-version is set" && exit 0
        mvn -B ${{ inputs.maven-additional-options }} -DskipTests ${{ inputs.maven-release-options }} deploy
        find . -path '**target/nexus-staging/deferred/.index' -exec sed -i 's@:camunda-nexus:.*$@:central:https://oss.sonatype.org/content/repositories/snapshots/@g' {} +
        mvn -B ${{ inputs.maven-additional-options }} -DskipTests ${{ inputs.maven-release-options }} org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
      shell: bash
      env:
        NEXUS_USR: ${{ inputs.nexus-usr}}
        NEXUS_PSW: ${{ inputs.nexus-psw }}
        MAVEN_USR: ${{ inputs.maven-usr }}
        MAVEN_PSW: ${{ inputs.maven-psw }}
    - name: Publish Maven Release
      run: |-
        test -z "${{ inputs.release-version }}" && echo "::debug::Skipping Release because release-version is unset" && exit 0
        # 1. set version
        mvn -B ${{ inputs.maven-additional-options }} versions:set org.codehaus.mojo:versions-maven-plugin:2.8.1:update-child-modules -DnewVersion=${{ inputs.release-version }}
        # 2. deploy release to Maven Central
        mvn -B ${{ inputs.maven-additional-options }} -DskipTests ${{ inputs.maven-release-options }} -DnexusUrl=https://oss.sonatype.org/ -DserverId=central ${RELEASE_PROFILE} deploy
      shell: bash
      env:
        NEXUS_USR: ${{ inputs.nexus-usr}}
        NEXUS_PSW: ${{ inputs.nexus-psw }}
        MAVEN_USR: ${{ inputs.maven-usr }}
        MAVEN_PSW: ${{ inputs.maven-psw }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
    - name: Prepare next development version
      run: ${{ github.action_path }}/resources/prepare-next-development-version.sh "${{ github.event.repository.default_branch }}" "${{ inputs.release-version }}" "${{ inputs.maven-additional-options }}"
      shell: bash
    - name: Archive artifacts
      run: |-
        test -z "${{ inputs.artifacts-pattern }}" && echo "::debug::Skipping archiving because artifacts-pattern is unset" && exit 0
        # Filename: [repo without org]-[version].zip
        ZIPFILE=${GITHUB_REPOSITORY#*/}-${{ inputs.release-version }}.zip
        zip $ZIPFILE $(find . -path ${{ inputs.artifacts-pattern }})
        echo "::set-output name=filename::${ZIPFILE}"
      shell: bash
      id: create-archive
